from pptx import Presentation
from pptx.util import Inches
from pptx.enum.shapes import MSO_SHAPE
from pptx.dml.color import RGBColor
from datetime import datetime
import os
import pandas as pd
from docx import Document
from openai import OpenAI
import re

# === ✅ Initialize OpenAI
client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

# === ✅ Generate GPT Insights and Recommendations
def generate_insights(df: pd.DataFrame):
    prompt = f"Analyze this data and provide 3–5 business insights and 2–3 strong recommendations:\n\n{df.head(10).to_string(index=False)}"

    response = client.chat.completions.create(
        model="gpt-4o",
        messages=[
            {"role": "system", "content": "You are a data analyst generating insights for supply chain decision makers."},
            {"role": "user", "content": prompt}
        ],
        temperature=0.4,
    )

    output = response.choices[0].message.content.strip()
    parts = re.split(r"\n{2,}", output)
    insights = ""
    recs = ""

    for part in parts:
        if "recommend" in part.lower():
            recs = part.strip()
        else:
            insights = part.strip()

    return insights, recs


# === ✅ Generate PowerPoint
def generate_ppt(question: str, df: pd.DataFrame):
    prs = Presentation()

    # Title slide
    slide_layout = prs.slide_layouts[0]
    slide = prs.slides.add_slide(slide_layout)
    slide.shapes.title.text = "Supply Sense AI"
    slide.placeholders[1].text = question

    # Insights & Recommendations Slide
    insights, recs = generate_insights(df)
    slide_layout = prs.slide_layouts[1]
    slide = prs.slides.add_slide(slide_layout)
    slide.shapes.title.text = "Insights & Recommendations"
    content = slide.placeholders[1]
    content.text = f"{insights}\n\n{recs}"

    # Data Preview Slide
    slide = prs.slides.add_slide(prs.slide_layouts[5])
    title = slide.shapes.title
    title.text = "Data Preview"

    rows, cols = min(10, len(df)) + 1, len(df.columns)
    left = Inches(0.5)
    top = Inches(1.5)
    width = Inches(9)
    height = Inches(0.8)
    table = slide.shapes.add_table(rows, cols, left, top, width, height).table

    # Set column headers
    for col_idx, col_name in enumerate(df.columns):
        table.cell(0, col_idx).text = str(col_name)

    # Fill table rows
    for row_idx, row in df.head(10).iterrows():
        for col_idx, col in enumerate(df.columns):
            table.cell(row_idx + 1, col_idx).text = str(row[col])

    # Thank You Slide
    slide = prs.slides.add_slide(prs.slide_layouts[1])
    slide.shapes.title.text = "Thank You"
    slide.placeholders[1].text = "This presentation was auto-generated by Supply Sense AI."

    # Save PPT
    filename = f"{question[:30].replace(' ', '_')}_{datetime.now().strftime('%Y%m%d%H%M%S')}.pptx"
    output_dir = "generated_files"
    os.makedirs(output_dir, exist_ok=True)
    ppt_path = os.path.join(output_dir, filename)
    prs.save(ppt_path)
    return ppt_path


# === ✅ Generate Excel File
def generate_excel(df: pd.DataFrame, question: str) -> str:
    filename = f"{question[:30].replace(' ', '_')}_{datetime.now().strftime('%Y%m%d%H%M%S')}.xlsx"
    output_dir = "generated_files"
    os.makedirs(output_dir, exist_ok=True)
    excel_path = os.path.join(output_dir, filename)
    df.to_excel(excel_path, index=False)
    return excel_path



# === ✅ Generate Word File
def generate_word(df: pd.DataFrame, question: str) -> str:
    insights, recs = generate_insights(df)

    doc = Document()
    doc.add_heading("Supply Sense AI Report", 0)
    doc.add_paragraph(f"Query: {question}", style="Intense Quote")

    doc.add_heading("Insights", level=1)
    doc.add_paragraph(insights)

    doc.add_heading("Recommendations", level=1)
    doc.add_paragraph(recs)

    doc.add_heading("Top 10 Data Records", level=1)
    table = doc.add_table(rows=1, cols=len(df.columns))
    table.style = 'Light Grid'
    hdr_cells = table.rows[0].cells
    for i, col in enumerate(df.columns):
        hdr_cells[i].text = str(col)

    for _, row in df.head(10).iterrows():
        row_cells = table.add_row().cells
        for i, val in enumerate(row):
            row_cells[i].text = str(val)

    filename = f"{question[:30].replace(' ', '_')}_{datetime.now().strftime('%Y%m%d%H%M%S')}.docx"
    output_dir = "generated_files"
    os.makedirs(output_dir, exist_ok=True)
    word_path = os.path.join(output_dir, filename)
    doc.save(word_path)
    return word_path
